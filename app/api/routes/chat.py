"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
"""

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field
from typing import Optional, List
from loguru import logger

from app.llm.rag_manager import RAGManager

router = APIRouter(prefix="/chat", tags=["chat"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π RAG –º–µ–Ω–µ–¥–∂–µ—Ä
rag_manager = None


class ChatRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞"""
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", min_length=1, max_length=1000)
    complexity_level: str = Field(default="medium", description="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞", 
                                pattern="^(simple|medium|hard)$")
    user_id: Optional[str] = Field(default=None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


class ChatResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞"""
    response: str = Field(..., description="–û—Ç–≤–µ—Ç –±–æ—Ç–∞")
    complexity_level: str = Field(..., description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    sources: Optional[List[str]] = Field(default=None, description="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    processing_time: float = Field(..., description="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")


class HealthResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è health check"""
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    rag_manager_ready: bool = Field(..., description="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    vector_db_ready: bool = Field(..., description="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
    llm_ready: bool = Field(..., description="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å LLM")


async def get_rag_manager() -> RAGManager:
    """–ü–æ–ª—É—á–∏—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä"""
    global rag_manager
    if rag_manager is None:
        try:
            rag_manager = RAGManager()
            if not rag_manager.initialize_services():
                raise HTTPException(status_code=503, detail="RAG —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            raise HTTPException(status_code=503, detail="–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    return rag_manager


@router.post("/", response_model=ChatResponse)
async def chat_endpoint(
    request: ChatRequest,
    rag_manager: RAGManager = Depends(get_rag_manager)
):
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞"""
    import time
    
    start_time = time.time()
    
    try:
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.message[:50]}...")
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user_id}")
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {request.complexity_level}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG pipeline
        response = rag_manager.process_query(
            query=request.message,
            complexity_level=request.complexity_level,
            top_k=3
        )
        
        processing_time = time.time() - start_time
        
        if response:
            logger.success(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {processing_time:.2f}—Å")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            sources = extract_sources_from_response(response)
            
            return ChatResponse(
                response=response,
                complexity_level=request.complexity_level,
                sources=sources,
                processing_time=processing_time
            )
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            raise HTTPException(
                status_code=500, 
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG –º–µ–Ω–µ–¥–∂–µ—Ä
        rag_manager = RAGManager()
        rag_ready = rag_manager.initialize_services()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        vector_db_ready = rag_manager.pinecone_client is not None
        llm_ready = rag_manager.llm_service is not None
        
        status = "healthy" if rag_ready else "unhealthy"
        
        return HealthResponse(
            status=status,
            rag_manager_ready=rag_ready,
            vector_db_ready=vector_db_ready,
            llm_ready=llm_ready
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ health check: {e}")
        return HealthResponse(
            status="unhealthy",
            rag_manager_ready=False,
            vector_db_ready=False,
            llm_ready=False
        )


@router.get("/test")
async def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "EORA Chat Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "version": "0.1.0",
        "status": "active"
    }


def extract_sources_from_response(response: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    import re
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
    sources = []
    pattern = r'\[([^\]]+)\]\(([^)]+)\)'
    matches = re.findall(pattern, response)
    
    for title, url in matches:
        sources.append(f"{title}: {url}")
    
    return sources if sources else None 