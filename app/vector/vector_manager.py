"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import json
import asyncio
from typing import List, Dict, Any, Optional
from pathlib import Path
from loguru import logger

from .pinecone_client import PineconeClient
from .embedding_service import EmbeddingService, VectorProcessor


class VectorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.pinecone_client = None
        self.embedding_service = None
        self.vector_processor = None
        
    def initialize_services(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone...")
            self.pinecone_client = PineconeClient()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if not self.pinecone_client.connect_to_index():
                if not self.pinecone_client.create_index():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É Pinecone")
                    return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
            self.embedding_service = EmbeddingService()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            if not self.embedding_service.test_embedding_generation():
                logger.error("–°–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤
            self.vector_processor = VectorProcessor(self.embedding_service)
            
            logger.success("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def load_cases_from_json(self, filepath: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ–π—Å—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            filepath = Path(filepath)
            if not filepath.exists():
                logger.error(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            with open(filepath, 'r', encoding='utf-8') as f:
                cases = json.load(f)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cases)} –∫–µ–π—Å–æ–≤ –∏–∑ {filepath}")
            return cases
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤: {e}")
            return []
    
    async def enhance_cases_with_ai(self, cases: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–æ–≥–∞—Ç–∏—Ç—å –∫–µ–π—Å—ã —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            from app.llm.llm_service import LLMService
            llm_service = LLMService()
            
            enhanced_cases = []
            for i, case in enumerate(cases):
                logger.info(f"–û–±–æ–≥–∞—â–∞–µ–º –∫–µ–π—Å {i+1}/{len(cases)}: {case.get('title', '')[:50]}...")
                
                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é AI
                if case.get("client") == "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω":
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
                    title = case.get('title', '').lower()
                    description = case.get('description', '').lower()
                    
                    # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    known_clients = [
                        '—Å–±–µ—Ä', 'sber', '–¥–æ–¥–æ', 'dodo', '–º–∞–≥–Ω–∏—Ç', 'avon', 'purina', 
                        'lamoda', 'kazanexpress', 'qiwi', '—Å—Ç–æ–ª–æ—Ç–æ', 'stoloto',
                        'goose gaming', 'sportrecs', 'ifarm', 'zeptolab'
                    ]
                    
                    found_client = None
                    for client in known_clients:
                        if client in title or client in description:
                            found_client = client
                            break
                    
                    if found_client:
                        # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤
                        if found_client in ['—Å–±–µ—Ä', 'sber']:
                            case["client"] = "–°–±–µ—Ä"
                        elif found_client in ['–¥–æ–¥–æ', 'dodo']:
                            case["client"] = "–î–æ–¥–æ –ü–∏—Ü—Ü–∞"
                        elif found_client == '–º–∞–≥–Ω–∏—Ç':
                            case["client"] = "–ú–∞–≥–Ω–∏—Ç"
                        elif found_client == 'avon':
                            case["client"] = "Avon"
                        elif found_client == 'purina':
                            case["client"] = "Purina"
                        elif found_client == 'lamoda':
                            case["client"] = "Lamoda"
                        elif found_client == 'kazanexpress':
                            case["client"] = "KazanExpress"
                        elif found_client == 'qiwi':
                            case["client"] = "QIWI"
                        elif found_client in ['—Å—Ç–æ–ª–æ—Ç–æ', 'stoloto']:
                            case["client"] = "–°—Ç–æ–ª–æ—Ç–æ"
                        elif found_client == 'goose gaming':
                            case["client"] = "Goose Gaming"
                        elif found_client == 'sportrecs':
                            case["client"] = "Sportrecs"
                        elif found_client == 'ifarm':
                            case["client"] = "iFarm"
                        elif found_client == 'zeptolab':
                            case["client"] = "ZeptoLab"
                        else:
                            case["client"] = found_client.title()
                        
                        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∫–ª–∏–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞: {case['client']}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º AI
                        context = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {case.get('title', '')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {case.get('description', '')}\n–ö–æ–Ω—Ç–µ–Ω—Ç: {case.get('content', '')[:1000]}"
                        
                        prompt = f"""
                        –ò–∑–≤–ª–µ–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ.
                        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π, –±—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.
                        
                        {context}
                        
                        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
                        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏ "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω".
                        """
                        
                        try:
                            client = await llm_service.generate_text(prompt)
                            if client and client.strip() and client.strip() != "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω":
                                case["client"] = client.strip()
                                logger.info(f"AI –∏–∑–≤–ª–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞: {client.strip()}")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–µ–π—Å–∞ {i+1}: {e}")
                
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è, –ø–æ–ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å
                if case.get("category") == "–û–±—â–∏–µ –∫–µ–π—Å—ã":
                    context = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {case.get('title', '')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {case.get('description', '')}"
                    
                    prompt = f"""
                    –û–ø—Ä–µ–¥–µ–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è.
                    
                    {context}
                    
                    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
                    """
                    
                    try:
                        category = await llm_service.generate_text(prompt)
                        if category and category.strip():
                            case["category"] = category.strip()
                            logger.info(f"AI —É–ª—É—á—à–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.strip()}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–µ–π—Å–∞ {i+1}: {e}")
                
                enhanced_cases.append(case)
            
            logger.success(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ {len(enhanced_cases)} –∫–µ–π—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é AI")
            return enhanced_cases
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤ AI: {e}")
            return cases
    
    async def process_and_upload_cases(self, cases: List[Dict[str, Any]], 
                               batch_size: int = 10, use_ai_enhancement: bool = True) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ–π—Å—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Pinecone"""
        try:
            if not self.vector_processor or not self.pinecone_client:
                logger.error("–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(cases)} –∫–µ–π—Å–æ–≤...")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–µ–π—Å—ã —Å –ø–æ–º–æ—â—å—é AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if use_ai_enhancement:
                logger.info("ü§ñ –û–±–æ–≥–∞—â–∞–µ–º –∫–µ–π—Å—ã —Å –ø–æ–º–æ—â—å—é AI...")
                cases = await self.enhance_cases_with_ai(cases)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ–π—Å—ã –±–∞—Ç—á–∞–º–∏
            all_vectors = []
            for i in range(0, len(cases), batch_size):
                batch = cases[i:i + batch_size]
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {i//batch_size + 1}/{(len(cases) + batch_size - 1)//batch_size}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                vectors = self.vector_processor.process_cases_batch(batch)
                all_vectors.extend(vectors)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Pinecone
                if vectors:
                    if not self.pinecone_client.upsert_vectors(vectors):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞—Ç—á–∞ {i//batch_size + 1}")
                        return False
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(cases):
                    asyncio.sleep(1)
            
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_vectors)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–µ–π—Å–æ–≤: {e}")
            return False
    
    def search_similar_cases(self, query: str, top_k: int = 5, 
                           filter_dict: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–µ–π—Å–æ–≤"""
        try:
            if not self.embedding_service or not self.pinecone_client:
                logger.error("–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = self.embedding_service.generate_embedding(query)
            if not query_embedding:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
                return []
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–µ–∫—Ç–æ—Ä—ã
            results = self.pinecone_client.search_similar(
                query_vector=query_embedding,
                top_k=top_k,
                filter_dict=filter_dict
            )
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –∫–µ–π—Å–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
    
    def get_index_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            if not self.pinecone_client:
                logger.error("Pinecone –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
            
            stats = self.pinecone_client.get_index_stats()
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--file", type=str, default="data/eora_cases_full.json", 
                       help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–µ–π—Å–∞–º–∏")
    parser.add_argument("--test", action="store_true", help="–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    parser.add_argument("--search", type=str, help="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    parser.add_argument("--no-ai", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å AI-–æ–±–æ–≥–∞—â–µ–Ω–∏–µ")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = VectorManager()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    if not manager.initialize_services():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
        return
    
    if args.test:
        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        stats = manager.get_index_statistics()
        if stats:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞: {stats}")
        return
    
    if args.search:
        # –ü–æ–∏—Å–∫
        logger.info(f"üîç –ü–æ–∏—Å–∫: {args.search}")
        results = manager.search_similar_cases(args.search, top_k=3)
        
        for i, result in enumerate(results, 1):
            logger.info(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç {i} ---")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('metadata', {}).get('title', 'N/A')}")
            logger.info(f"–ö–ª–∏–µ–Ω—Ç: {result.get('metadata', {}).get('client', 'N/A')}")
            logger.info(f"URL: {result.get('metadata', {}).get('url', 'N/A')}")
            logger.info(f"–°—Ö–æ–∂–µ—Å—Ç—å: {result.get('score', 0):.3f}")
        return
    
    # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ–π—Å—ã
    cases = manager.load_cases_from_json(args.file)
    if not cases:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ–π—Å—ã")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
    use_ai_enhancement = not args.no_ai
    if await manager.process_and_upload_cases(cases, use_ai_enhancement=use_ai_enhancement):
        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_index_statistics()
        if stats:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞: {stats}")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


if __name__ == "__main__":
    asyncio.run(main()) 