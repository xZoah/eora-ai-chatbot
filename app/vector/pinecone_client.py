"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pinecone Vector Database
"""

import os
import asyncio
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from pinecone import Pinecone, ServerlessSpec
from loguru import logger


@dataclass
class VectorMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∞"""
    title: str
    description: str
    client: str
    technologies: List[str]
    url: str
    category: str
    content: str


class PineconeClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pinecone"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv("PINECONE_API_KEY")
        self.index_name = os.getenv("PINECONE_INDEX_NAME", "eora-cases")
        self.dimension = 1536  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è text-embedding-3-small
        self.metric = "cosine"
        
        if not self.api_key:
            raise ValueError("PINECONE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone
        self.pc = Pinecone(api_key=self.api_key)
        self.index = None
        
    def connect_to_index(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É"""
        try:
            if self.index_name not in self.pc.list_indexes().names():
                logger.error(f"–ò–Ω–¥–µ–∫—Å {self.index_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            self.index = self.pc.Index(self.index_name)
            logger.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–Ω–¥–µ–∫—Å—É {self.index_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω–¥–µ–∫—Å—É: {e}")
            return False
    
    def upsert_vectors(self, vectors: List[Dict[str, Any]]) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ–∫—Ç–æ—Ä—ã –≤ Pinecone"""
        try:
            if not self.index:
                logger.error("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {len(vectors)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Pinecone...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 100 –≤–µ–∫—Ç–æ—Ä–æ–≤
            batch_size = 100
            for i in range(0, len(vectors), batch_size):
                batch = vectors[i:i + batch_size]
                self.index.upsert(vectors=batch)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –±–∞—Ç—á {i//batch_size + 1}/{(len(vectors) + batch_size - 1)//batch_size}")
            
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(vectors)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    def search_similar(self, query_vector: List[float], top_k: int = 5, 
                      filter_dict: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            if not self.index:
                logger.error("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"–ò—â–µ–º {top_k} –ø–æ—Ö–æ–∂–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.index.query(
                vector=query_vector,
                top_k=top_k,
                include_metadata=True,
                filter=filter_dict
            )
            
            logger.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results['matches'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results['matches']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
    
    def delete_vectors(self, ids: List[str]) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≤–µ–∫—Ç–æ—Ä—ã –ø–æ ID"""
        try:
            if not self.index:
                logger.error("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info(f"–£–¥–∞–ª—è–µ–º {len(ids)} –≤–µ–∫—Ç–æ—Ä–æ–≤...")
            self.index.delete(ids=ids)
            logger.success(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {len(ids)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    def get_index_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            if not self.index:
                logger.error("–ò–Ω–¥–µ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
            
            stats = self.index.describe_index_stats()
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def create_vector_id(self, url: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –¥–æ–º–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Ç—å
        path = url.replace("https://eora.ru", "").replace("http://eora.ru", "")
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–µ—à–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        vector_id = path.replace("/", "_").replace("-", "_")
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        vector_id = "_".join(filter(None, vector_id.split("_")))
        return f"case_{vector_id}"
    
    def prepare_metadata(self, case_data: VectorMetadata) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∞"""
        return {
            "title": case_data.title,
            "description": case_data.description,
            "client": case_data.client,
            "technologies": ",".join(case_data.technologies),
            "url": case_data.url,
            "category": case_data.category,
            "content_length": len(case_data.content)
        }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
def test_pinecone_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pinecone"""
    try:
        client = PineconeClient()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        if client.connect_to_index():
            logger.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pinecone —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = client.get_index_stats()
            if stats:
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞: {stats}")
            
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω–¥–µ–∫—Å—É Pinecone")
            return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Pinecone: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_pinecone_connection() 