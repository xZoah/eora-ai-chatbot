"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ LLM
"""

import os
import asyncio
from typing import List, Dict, Any, Optional
from loguru import logger

from app.vector.embedding_service import EmbeddingService
from app.vector.pinecone_client import PineconeClient
from app.llm.llm_service import LLMService, RAGPipeline


class RAGManager:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è RAG pipeline"""
    
    def __init__(self):
        self.embedding_service = None
        self.pinecone_client = None
        self.llm_service = None
        self.rag_pipeline = None
        
    def initialize_services(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å—ã...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
            self.embedding_service = EmbeddingService()
            if not self.embedding_service.test_embedding_generation():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone –∫–ª–∏–µ–Ω—Ç
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pinecone...")
            self.pinecone_client = PineconeClient()
            if not self.pinecone_client.connect_to_index():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pinecone")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å...")
            self.llm_service = LLMService()
            if not self.llm_service.test_llm_connection():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM —Å–µ—Ä–≤–∏—Å")
                return False
            
            # –°–æ–∑–¥–∞–µ–º RAG pipeline
            self.rag_pipeline = RAGPipeline(
                llm_service=self.llm_service,
                vector_service=self.pinecone_client
            )
            
            logger.success("‚úÖ –í—Å–µ RAG —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def process_query(self, query: str, complexity_level: str = "medium", 
                     top_k: int = 5) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π RAG pipeline"""
        try:
            if not self.rag_pipeline:
                logger.error("RAG pipeline –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
            logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity_level}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = self.embedding_service.generate_embedding(query)
            if not query_embedding:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
                return None
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            similar_docs = self.pinecone_client.search_similar(query_embedding, top_k)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_docs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ—Ä–æ–≥ 0.35)
            filtered_docs = [doc for doc in similar_docs if doc.get('score', 0) > 0.35]
            logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ score > 0.35 –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø-2 —Å –Ω–∞–∏–≤—ã—Å—à–∏–º score
            if len(filtered_docs) == 0:
                filtered_docs = sorted(similar_docs, key=lambda x: x.get('score', 0), reverse=True)[:2]
                logger.info(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å score > 0.35, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø-2: {len(filtered_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, doc in enumerate(filtered_docs, 1):
                metadata = doc.get('metadata', {})
                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                client = metadata.get('client', '–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
                score = doc.get('score', 0)
                logger.debug(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç {i}: {title} (–∫–ª–∏–µ–Ω—Ç: {client}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            similar_docs = filtered_docs
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.llm_service.generate_response(
                query=query,
                context=similar_docs,
                complexity_level=complexity_level
            )
            
            if response:
                logger.success("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return response
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ RAG pipeline: {e}")
            return None
    
    def test_full_pipeline(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ RAG pipeline"""
        try:
            test_query = "–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?"
            response = self.process_query(test_query, "medium")
            
            if response:
                logger.success(f"‚úÖ –ü–æ–ª–Ω—ã–π RAG pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                logger.info(f"üìù –û—Ç–≤–µ—Ç: {response}")
                return True
            else:
                logger.error("‚ùå RAG pipeline –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RAG pipeline: {e}")
            return False
    
    def get_index_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞"""
        if self.pinecone_client:
            return self.pinecone_client.get_index_stats()
        return {}


def test_rag_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        rag_manager = RAGManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        if rag_manager.initialize_services():
            logger.success("‚úÖ RAG –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline
            if rag_manager.test_full_pipeline():
                logger.success("‚úÖ –ü–æ–ª–Ω—ã–π RAG pipeline —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.error("‚ùå RAG pipeline –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="RAG Manager –¥–ª—è EORA Chat Bot")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    parser.add_argument("--query", type=str, help="–ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    parser.add_argument("--complexity", type=str, default="medium", 
                       choices=["simple", "medium", "hard"], 
                       help="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞")
    parser.add_argument("--top-k", type=int, default=3, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    args = parser.parse_args()
    
    if args.test:
        logger.info("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        success = test_rag_manager()
        if success:
            logger.success("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    elif args.query:
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: {args.query}")
        rag_manager = RAGManager()
        
        if rag_manager.initialize_services():
            response = rag_manager.process_query(
                query=args.query,
                complexity_level=args.complexity,
                top_k=args.top_k
            )
            
            if response:
                logger.success("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                print("\n" + "="*50)
                print(response)
                print("="*50)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
    
    else:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ --query –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


if __name__ == "__main__":
    asyncio.run(main()) 