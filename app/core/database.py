"""
Database configuration and models for Supabase PostgreSQL
"""

import os
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import func
from loguru import logger

Base = declarative_base()

class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(String, unique=True, index=True)
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    complexity_level = Column(String, default="medium")  # simple, medium, hard
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

class ChatSession(Base):
    """–ú–æ–¥–µ–ª—å —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    __tablename__ = "chat_sessions"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True)
    session_id = Column(String, unique=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    is_active = Column(Boolean, default=True)

class Message(Base):
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    __tablename__ = "messages"
    
    id = Column(Integer, primary_key=True, index=True)
    session_id = Column(String, index=True)
    user_message = Column(Text)
    bot_response = Column(Text)
    sources = Column(Text, nullable=True)  # JSON string —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    complexity_level = Column(String)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

def get_database_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # Supabase connection string
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        database_url = "postgresql://postgres:password@localhost:5432/eora_chatbot"
    
    return database_url

def create_database_engine_alternative():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è engine —Å Transaction Pooler (IPv4 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Supabase –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if "?" not in database_url:
            database_url += "?sslmode=require&client_encoding=utf8"
        
        logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DATABASE_URL")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º postgresql+psycopg2 –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç Supabase
        engine = create_engine(database_url, echo=False)
        return engine
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ engine: {e}")
        return None

def create_database_engine():
    """–°–æ–∑–¥–∞—Ç—å engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    database_url = get_database_url()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Supabase
    if "?" not in database_url:
        database_url += "?sslmode=require&client_encoding=utf8"
    engine = create_engine(database_url, echo=False)
    return engine

def create_tables(engine):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")

def get_session():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    engine = create_database_engine()
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal() 