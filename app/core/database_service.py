"""
Database service for Supabase integration
"""

import json
from typing import Optional, Dict, Any
from sqlalchemy.orm import Session
from loguru import logger
import os

from app.core.database import (
    User, ChatSession, Message, 
    get_session, create_tables, create_database_engine, create_database_engine_alternative
)


class DatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.session = None
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            database_url = os.getenv("DATABASE_URL")
            
            if not database_url:
                logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Transaction Pooler (IPv4 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π) –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
            self.engine = create_database_engine_alternative()
            if not self.engine:
                logger.warning("‚ö†Ô∏è Transaction Pooler –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Direct Connection...")
                # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
                self.engine = create_database_engine()
                if not self.engine:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return False
                logger.info("‚úÖ Direct Connection —É—Å–ø–µ—à–µ–Ω")
            else:
                logger.info("‚úÖ Transaction Pooler –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            create_tables(self.engine)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ engine
            from sqlalchemy.orm import sessionmaker
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
            self.session = SessionLocal()
            logger.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_or_create_user(self, telegram_id: str, username: str = None, 
                          first_name: str = None, last_name: str = None) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
        try:
            if not self.session:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return None
                
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if username and user.username != username:
                    user.username = username
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                self.session.commit()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=telegram_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    complexity_level="hard"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                self.session.add(user)
                self.session.commit()
            
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            if self.session:
                self.session.rollback()
            return None
    
    def update_user_complexity(self, telegram_id: str, complexity_level: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.session:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
                
            user = self.session.query(User).filter(User.telegram_id == telegram_id).first()
            if user:
                user.complexity_level = complexity_level
                self.session.commit()
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {complexity_level}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            if self.session:
                self.session.rollback()
            return False
    
    def create_chat_session(self, user_id: int) -> Optional[ChatSession]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
        try:
            if not self.session:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return None
                
            import uuid
            session_id = str(uuid.uuid4())
            
            session = ChatSession(
                user_id=user_id,
                session_id=session_id
            )
            self.session.add(session)
            self.session.commit()
            
            logger.info(f"üí¨ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —á–∞—Ç–∞: {session_id}")
            return session
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞: {e}")
            if self.session:
                self.session.rollback()
            return None
    
    def get_or_create_active_session(self, user_id: int) -> Optional[ChatSession]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"""
        try:
            if not self.session:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return None
                
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (–ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            from datetime import datetime, timedelta
            cutoff_time = datetime.utcnow() - timedelta(hours=24)
            
            active_session = self.session.query(ChatSession).filter(
                ChatSession.user_id == user_id,
                ChatSession.created_at >= cutoff_time
            ).order_by(ChatSession.created_at.desc()).first()
            
            if active_session:
                logger.info(f"üí¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é: {active_session.session_id}")
                return active_session
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                return self.create_chat_session(user_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def save_message(self, session_id: str, user_message: str, bot_response: str,
                    sources: list = None, complexity_level: str = "medium", processing_time: float = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.session:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
                
            sources_json = json.dumps(sources) if sources else None
            
            message = Message(
                session_id=session_id,
                user_message=user_message,
                bot_response=bot_response,
                sources=sources_json,
                complexity_level=complexity_level,
                processing_time=processing_time
            )
            self.session.add(message)
            self.session.commit()
            
            logger.debug(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if self.session:
                self.session.rollback()
            return False
    
    def get_user_stats(self, telegram_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.session.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return {}
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            message_count = self.session.query(Message).join(
                ChatSession, Message.session_id == ChatSession.session_id
            ).filter(ChatSession.user_id == user.id).count()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
            session_count = self.session.query(ChatSession).filter(
                ChatSession.user_id == user.id
            ).count()
            
            return {
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "username": user.username,
                "complexity_level": user.complexity_level,
                "message_count": message_count,
                "session_count": session_count,
                "created_at": user.created_at
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.session:
            self.session.close()
        if self.engine:
            self.engine.dispose() 