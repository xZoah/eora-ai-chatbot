"""
Telegram –±–æ—Ç –¥–ª—è EORA Chat Bot
"""

import os
import asyncio
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from loguru import logger
from dotenv import load_dotenv

from app.llm.rag_manager import RAGManager
from app.core.database_service import DatabaseService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class EoraTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è EORA Chat Bot"""

    def __init__(self):
        self.rag_manager = None
        self.database_service = None
        self.user_settings = {}
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG –º–µ–Ω–µ–¥–∂–µ—Ä
            self.rag_manager = RAGManager()
            if not self.rag_manager.initialize_services():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.database_service = DatabaseService()
            if not self.database_service.initialize():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë")

            logger.success("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def get_welcome_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EORA Chat Bot!

–Ø - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ EORA, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ AI —Ä–µ—à–µ–Ω–∏–π.

üí° –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö EORA
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∫–µ–π—Å–∞—Ö
‚Ä¢ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

üéõÔ∏è –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π - –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤  
‚Ä¢ –°–ª–æ–∂–Ω—ã–π - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

üìä –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!
        """

    def get_help_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
        return """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîç –ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å AI"
‚Ä¢ "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?"

üìä –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π - –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –°–ª–æ–∂–Ω—ã–π - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è (—Ä–∏—Ç–µ–π–ª, –±–∞–Ω–∫–∏, –º–µ–¥–∏—Ü–∏–Ω–∞)
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (AI, Computer Vision, NLP)
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–µ–π—Å—ã
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª—É–≥–∏ EORA
        """

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        welcome_message = self.get_welcome_message()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ "hard"
        self.user_settings[user_id] = "hard"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if self.database_service:
            db_user = self.database_service.get_or_create_user(
                telegram_id=str(user_id),
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            if db_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                self.user_settings[user_id] = db_user.complexity_level
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = self.get_help_message()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_message, reply_markup=reply_markup)

    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        current_level = self.user_settings.get(user_id, "hard")
        
        message = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {self.get_level_name(current_level)}"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å—Ç–æ–π", callback_data="level_simple")],
            [InlineKeyboardButton("üìã –°—Ä–µ–¥–Ω–∏–π", callback_data="level_medium")],
            [InlineKeyboardButton("üìñ –°–ª–æ–∂–Ω—ã–π", callback_data="level_hard")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.database_service:
            await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return
        
        try:
            stats = self.database_service.get_user_stats(str(user_id))
            
            if stats:
                message = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
                message += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('message_count', 0)}\n"
                message += f"‚Ä¢ –°–µ—Å—Å–∏–π —á–∞—Ç–∞: {stats.get('session_count', 0)}\n"
                message += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {self.get_level_name(stats.get('complexity_level', 'medium'))}\n"
                message += f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if not message_text or len(message_text.strip()) == 0:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        complexity_level = self.user_settings.get(user_id, "hard")
        
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text}")
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity_level}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_message = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG pipeline
            response = self.rag_manager.process_query(
                query=message_text,
                complexity_level=complexity_level,
                top_k=5
            )
            
            if response:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
                formatted_response = self._format_response_for_telegram(response)
                await update.message.reply_text(formatted_response, parse_mode='HTML')
                logger.success(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if self.database_service:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db_user = self.database_service.get_or_create_user(
                        telegram_id=str(user_id),
                        username=update.effective_user.username,
                        first_name=update.effective_user.first_name,
                        last_name=update.effective_user.last_name
                    )
                    
                    if db_user:
                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                        session = self.database_service.get_or_create_active_session(db_user.id)
                        if session:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            self.database_service.save_message(
                                session_id=session.session_id,
                                user_message=message_text,
                                bot_response=response,
                                complexity_level=complexity_level
                            )
            else:
                await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await processing_message.delete()
            except:
                pass

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        await query.answer()
        
        if query.data == "start":
            welcome_message = self.get_welcome_message()
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(welcome_message, reply_markup=reply_markup)
            
        elif query.data == "help":
            help_message = self.get_help_message()
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(help_message, reply_markup=reply_markup)
            
        elif query.data == "settings":
            current_level = self.user_settings.get(user_id, "hard")
            message = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {self.get_level_name(current_level)}"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ü—Ä–æ—Å—Ç–æ–π", callback_data="level_simple")],
                [InlineKeyboardButton("üìã –°—Ä–µ–¥–Ω–∏–π", callback_data="level_medium")],
                [InlineKeyboardButton("üìñ –°–ª–æ–∂–Ω—ã–π", callback_data="level_hard")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        elif query.data.startswith("level_"):
            level = query.data.replace("level_", "")
            self.user_settings[user_id] = level
            level_name = self.get_level_name(level)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if self.database_service:
                self.database_service.update_user_complexity(str(user_id), level)
            
            message = f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {level_name}"
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {level}")

    def _format_response_for_telegram(self, response: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è Telegram"""
        import re
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Markdown —Å—Å—ã–ª–∫–∏ [—Ç–µ–∫—Å—Ç](url) -> HTML —Å—Å—ã–ª–∫–∏
        markdown_link_pattern = r'\[([^\]]+)\]\(([^)]+)\)'
        
        def replace_markdown_link(match):
            link_text = match.group(1)
            url = match.group(2)
            return f'<a href="{url}">{link_text}</a>'
        
        # –ó–∞–º–µ–Ω—è–µ–º Markdown —Å—Å—ã–ª–∫–∏ –Ω–∞ HTML —Å—Å—ã–ª–∫–∏
        formatted_response = re.sub(markdown_link_pattern, replace_markdown_link, response)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** -> <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
        bold_pattern = r'\*\*([^*]+)\*\*'
        
        def replace_bold(match):
            text = match.group(1)
            return f'<b>{text}</b>'
        
        formatted_response = re.sub(bold_pattern, replace_bold, formatted_response)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º *–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç* -> <i>–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>
        italic_pattern = r'\*([^*]+)\*'
        
        def replace_italic(match):
            text = match.group(1)
            return f'<i>{text}</i>'
        
        formatted_response = re.sub(italic_pattern, replace_italic, formatted_response)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ### –∑–∞–≥–æ–ª–æ–≤–∫–∏ -> <b>–∑–∞–≥–æ–ª–æ–≤–∫–∏</b>
        header_pattern = r'###\s*([^\n]+)'
        
        def replace_header(match):
            text = match.group(1)
            return f'<b>{text}</b>'
        
        formatted_response = re.sub(header_pattern, replace_header, formatted_response)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ URL (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Å—Å—ã–ª–∫–∞—Ö)
        url_pattern = r'(?<!<a href=")https?://[^\s]+(?!">)'
        
        def replace_url(match):
            url = match.group(0)
            return f'<a href="{url}">{url}</a>'
        
        formatted_response = re.sub(url_pattern, replace_url, formatted_response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ
        return f"üí° {formatted_response}"

    def get_level_name(self, level: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        levels = {
            "simple": "üìù –ü—Ä–æ—Å—Ç–æ–π",
            "medium": "üìã –°—Ä–µ–¥–Ω–∏–π", 
            "hard": "üìñ –°–ª–æ–∂–Ω—ã–π"
        }
        return levels.get(level, "üìã –°—Ä–µ–¥–Ω–∏–π")

    async def setup_webhook(self, webhook_url: str) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞"""
        try:
            from telegram import Bot
            
            bot = Bot(token=self.bot_token)
            result = await bot.set_webhook(url=webhook_url)
            
            if result:
                logger.success(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            return False

    async def handle_webhook_update(self, update_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook update –æ—Ç Telegram"""
        try:
            from telegram import Update, Bot
            from telegram.ext import ContextTypes
            
            # –°–æ–∑–¥–∞–µ–º Bot –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            bot = Bot(token=self.bot_token)
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            update = Update.de_json(update_data, bot)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = ContextTypes.DEFAULT_TYPE()
            context.bot = bot
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.message:
                await self.handle_message(update, context)
            elif update.callback_query:
                await self.handle_callback(update, context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")

    def run_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (polling –º–µ—Ç–æ–¥ - –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG –º–µ–Ω–µ–¥–∂–µ—Ä
            if not self.rag_manager:
                self.rag_manager = RAGManager()
                if not self.rag_manager.initialize_services():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –º–µ–Ω–µ–¥–∂–µ—Ä")
                    return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if not self.database_service:
                try:
                    self.database_service = DatabaseService()
                    if not self.database_service.initialize():
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.bot_token).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("settings", self.settings_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.success("‚úÖ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Railway
                self.application.run_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True,
                    close_loop=False,
                    read_timeout=30,
                    write_timeout=30,
                    connect_timeout=30,
                    pool_timeout=30
                )
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = EoraTelegramBot()
        bot.run_bot()
        
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 